.\" Automatically generated by Pod::Man version 1.15
.\" Sun Mar 20 16:12:08 2005
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "MOCKTIME 1"
.TH MOCKTIME 1 "perl v5.6.1" "2005-03-20" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Test::MockTime \- Replaces actual time with simulated time 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Test::MockTime();
\&  Test::MockTime::set_relative_time(-600);
.Ve
.Vb 1
\&  # do some tests depending on time increasing from 600 seconds ago
.Ve
.Vb 1
\&  Test::MockTime::set_absolute_time(0);
.Ve
.Vb 2
\&  # do some more tests depending on time starting from the epoch
\&  # epoch may vary according to platform.  see perlport.
.Ve
.Vb 1
\&  Test::MockTime::set_fixed_time(CORE::time());
.Ve
.Vb 1
\&  # do some more tests depending on time staying at the current actual time
.Ve
.Vb 1
\&  Test::MockTime::restore();
.Ve
.Vb 1
\&  # resume normal service
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module was created to enable test suites to test code at specific 
points in time. Specifically it overrides localtime, gmtime and time at
compile time and then relies on the user supplying a mock time via 
set_relative_time, set_absolute_time or set_fixed_time to alter future 
calls to gmtime,time or localtime.
.SH "Functions"
.IX Header "Functions"
.Ip "set_absolute_time($time)"
.IX Item "set_absolute_time($time)"
takes as an argument an absolute time (for example, if 0 is supplied, the
absolute time will be the epoch), and calculates the offset to allow 
subsequent calls to time,gmtime and localtime to reflect this.
.PP
for example, in the following code
.PP
.Vb 4
\&  Time::Mock::set_absolute_time(0);
\&  my ($start) = time;
\&  sleep 2;
\&  my ($end) = time;
.Ve
The \f(CW$end\fR variable should contain 2 seconds past the epoch;
.Ip "set_relative_time($relative)"
.IX Item "set_relative_time($relative)"
takes as an argument an relative value from current time (for example, if \-10
is supplied, current time be converted to actual machine time \- 10 seconds)
and calculates the offset to allow subsequent calls to time,gmtime and localtime
to reflect this.
.PP
for example, in the following code
.PP
.Vb 4
\&  my ($start) = time;
\&  Time::Mock::set_relative_time(-600);
\&  sleep 600;
\&  my ($end) = time;
.Ve
The \f(CW$end\fR variable should contain either the same or very similar values to the
\&\f(CW$start\fR variable.
.Ip "set_fixed_time($time)"
.IX Item "set_fixed_time($time)"
takes as an argument an absolute time (for example, if 0 is supplied, the
absolute time will be the epoch).  All subsequent calls to gmtime, localtime and
time will return this value.
.PP
for example, in the following code
.PP
.Vb 4
\&  Time::Mock::set_fixed_time(time)
\&  my ($start) = time;
\&  sleep 3;
\&  my ($end) = time;
.Ve
the \f(CW$end\fR variable and the \f(CW$start\fR variable will contain the same results
.Ip "\fIrestore()\fR"
.IX Item "restore()"
restore the default time handling values
.SH "AUTHOR"
.IX Header "AUTHOR"
David Dick <ddick@cpan.org>
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
None
.SH "BUGS"
.IX Header "BUGS"
Probably.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to a use.perl.org journal entry <http://use.perl.org/~geoff/journal/20660> by 
Geoffrey Young.
